---
title: "(r)ollama demo"
author: "JBGruber"
format: html
editor_options:
  chunk_output_type: console
---

```{r setup}
rlang::check_installed(c("rollama",
                         "tidyverse"))
library(rollama)
library(tidyverse)
```

Is Ollama running?

```{r}
ping_ollama()
```

```{r}
query("Who are you?", model = "orca-mini") # this one forgets the conversation
chat("What is 1 + 1?", model = "orca-mini")  # this one retains the conversation
chat("Now take the result and add 1. What is it?", model = "orca-mini")
new_chat()
```

# configure

```{r}
# use desktop PC instead
options(rollama_server = "http://192.168.2.29:11434")
ping_ollama()
```

```{r}
query("why is the sky blue?")
```

```{r}
options(rollama_config = "You make answers understandable to a 5 year old")
```

```{r}
query("why is the sky blue?")
```

```{r}
options(rollama_model = "mistral")
```

```{r}
query("why is the sky blue?")
```

```{r}
options(rollama_config = NULL, rollama_model = NULL)
```

```{r}
query("why is the sky blue?",
      model_params = list(
        num_keep = 5,
        seed = 42,                      # for reproducibility
        num_predict = 100,
        top_k = 20,
        top_p = 0.9,
        tfs_z = 0.5,
        typical_p = 0.7,
        repeat_last_n = 33,
        temperature = 0,                # less random answers
        repeat_penalty = 1.2,
        presence_penalty = 1.5,
        frequency_penalty = 1.0,
        mirostat = 1,
        mirostat_tau = 0.8,
        mirostat_eta = 0.6,
        penalize_newline = TRUE,
        numa = FALSE,
        num_ctx = 1024,
        num_batch = 2,
        num_gqa = 1,
        num_gpu = 0,                    # turn GPU on and off
        main_gpu = 0,
        low_vram = FALSE,
        f16_kv = TRUE,
        vocab_only = FALSE,
        use_mmap = TRUE,
        use_mlock = FALSE,
        rope_frequency_base = 1.1,
        rope_frequency_scale = 0.8,
        num_thread = 8
      ))
```

# models

```{r}
list_models()
```

```{r}
model_info <- show_model("mistral")
View(model_info)
```

```{r}
# get this model at https://openwebui.com/m/hub/based-dolphin-mixtral:latest
model_info <- show_model("based-dolphin-mixtral") |> 
  cli::bg_br_green() |> 
  cli::cat_line()
```

```{r}
modelfile <- system.file("extdata", "modelfile.txt", package = "rollama")
readLines(modelfile) |> 
  cli::bg_br_green() |> 
  cli::cat_line()
```

```{r}
create_model("mario", modelfile = modelfile)
```

```{r}
chat("who are you?", model = "mario")
```

# annotation

(see <https://jbgruber.github.io/rollama/articles/annotation.html>)

```{r}
q <- tribble(
  ~role,    ~content,
  "system", "You assign texts into categories. Answer with just the correct category.",
  "user", "text: the pizza tastes terrible\ncategories: positive, neutral, negative",
  "assistant", "{'Category':'Negative','Confidence':'100%','Important':'terrible'}",
  "user", "text: the service is great\ncategories: positive, neutral, negative"
)
answer <- query(q)
```

```{r}
# Create an example dataframe with 5 movie reviews
movie_reviews <- tibble(
  review_id = 1:5,
  review = c("A stunning visual spectacle with a gripping storyline.",
             "The plot was predictable, but the acting was superb.",
             "An overrated film with underwhelming performances.",
             "A beautiful tale of love and adventure, beautifully shot.",
             "The movie lacked depth, but the special effects were incredible.")
)
# Print the initial dataframe
movie_reviews
```

```{r}
movie_reviews_annotated <- movie_reviews |> 
  mutate(annotation = map_chr(review, function(r) {
    q <- tribble(
      ~role,    ~content,
      "system", "You assign texts into categories. Answer with just the correct category.",
      "user", "text: the pizza tastes terrible\ncategories: positive, neutral, negative",
      "assistant", "{'Category':'Negative','Confidence':'100%','Important':'terrible'}",
      "user", glue::glue("text: {r}\ncategories: positive, neutral, negative")
    )
    query(q) |> 
      pluck("message", "content")
  }))

movie_reviews_annotated
```

```{r}
q <- tribble(
  ~role,    ~content,
  "system", "You are a helpful text annotator that annotates opinions in language. An opinion consists of an **evaluation** (e.g., good or bad) and a **target** (e.g., a movie, a restaurant or a policy). If either one is missing, say NONE, do not make things up.",
  "user", "the pizza at this restaurant tastes terrible",
  "assistant", "{'Target':'Pizza at restaurant','Evaluation':'bad taste','Important words':'terrible'}",
  "user", "the service at Corte & Cata is great"
)
answer <- query(q)
```

```{r}
f <- "data/wilson_speech.txt"
speech <- readChar(f, nchars = file.size(f))
cat(speech)
```

```{r}
q <- tribble(
  ~role,    ~content,
  "system", "You are a helpful text annotator that annotates opinions in language. An opinion consists of an **evaluation** (e.g., good or bad) and a **target** (e.g., a movie, a restaurant or a policy). If either one is missing, say NONE, do not make things up.",
  "user", "the pizza at this restaurant tastes terrible",
  "assistant", "{'Target':'Pizza at restaurant','Evaluation':'bad taste','Important words':'terrible'}",
  "user", speech
)
query(q, model = "llama3:8b", model_params = list(seed = 42, temperature = 0))
```

```{r}
q <- tribble(
  ~role,    ~content,
  "system", "You are a helpful text annotator that annotates opinions in language. An opinion consists of an **evaluation** (e.g., good or bad) and a **target** (e.g., a movie, a restaurant or a policy). If either one is missing, say NONE, do not make things up.",
  "user", "the pizza at this restaurant tastes terrible",
  "assistant", "{'Target':'Pizza at restaurant','Evaluation':'bad taste','Important words':'terrible'}",
  "user", "YES!
There are signs of a small surprise in the European elections in the Netherlands. According to post-election polls, the red-green alliance of Social Democrats and Greens is just ahead of the party of right-wing populist Geert Wilders, which had been ahead in the polls."
)
query(q, model = "llama3:8b", model_params = list(seed = 42, temperature = 0))
```

```{r}
df <- paperboy::pb_deliver("https://www.theguardian.com/commentisfree/article/2024/jun/09/the-observer-view-on-d-day-furore-rishi-sunak-is-driving-tories-over-an-electoral-cliff-edge")
article <- paste(df$headline[1], "\n\n", df$text[1])
cat(article)
q <- tribble(
  ~role,    ~content,
  "system", "You are a helpful text annotator that annotates opinions in language. An opinion consists of an **evaluation** (e.g., good or bad) and a **target** (e.g., a movie, a restaurant or a policy). If either one is missing, say NONE, do not make things up.",
  "user", "the pizza at this restaurant tastes terrible",
  "assistant", "{'Target':'Pizza at restaurant','Evaluation':'bad taste','Important words':'terrible'}",
  "user", article
)
query(q, model = "llama3:8b", model_params = list(seed = 42, temperature = 0))
```

```{r}
df <- paperboy::pb_deliver("https://www.theguardian.com/commentisfree/article/2024/jun/09/the-guardian-view-on-frances-olympic-summer-searching-for-the-feelgood-factor")
article <- paste(df$headline[1], "\n\n", df$text[1])
cat(article)
q <- tribble(
  ~role,    ~content,
  "system", "You are a helpful text annotator that annotates opinions in language. An opinion consists of an **evaluation** (e.g., good or bad) and a **target** (e.g., a movie, a restaurant or a policy). If either one is missing, say NONE, do not make things up.",
  "user", "the pizza at this restaurant tastes terrible",
  "assistant", "{'Target':'Pizza at restaurant','Evaluation':'bad taste','Important words':'terrible'}",
  "user", article
)
query(q, model = "llama3:8b", model_params = list(seed = 42, temperature = 0))
```

# image annotation

(see <https://jbgruber.github.io/rollama/articles/image-annotation.html>)

![](https://raw.githubusercontent.com/JBGruber/rollama/master/man/figures/logo.png)

```{r}
query("Excitedly desscribe this logo", 
      model = "llava",
      images = "https://raw.githubusercontent.com/JBGruber/rollama/master/man/figures/logo.png")
```

![](media/JBGruber.jpg)

```{r}
query("Who do you see on this picture: a student or a professor. Assign probabilities to each category. Think before you answer", 
      model = "llava",
      images = "media/JBGruber.jpg")
```
